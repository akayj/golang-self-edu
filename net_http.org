#+TITLE: Golang 标准库: net/http
#+TAGS: golang, net, http

Golang的标准库之 net/http, http是在编程中出镜率非常搞的一个东西。
而Golang对它的封装和抽象也是非常值得学习的。

* 结构体/接口
** [[https://golang.org/pkg/net/http/#Client][Client]]
*** 方法
- Do(req **Request) (**Response, error)
- Get(url string) (**Response, error)
- Head(req **Request) (**Response, error)
- Post(url, contentType string, body io.Reader) (**Response, error)
- PostForm(url string, data url.Values) (**Response, error)


** [[https://golang.org/pkg/net/http/#Server][Server]]

** [[https://golang.org/pkg/net/http/#Handler][Handler]]
    A handler response to an HTTP request. 处理器响应HTTP请求

#+BEGIN_SRC C
type Handler interface {
  ServeHTTP(ResponseWriter, *Request)
}
#+end_src

- ServeHTTP 应当将回复的 headers, data 写入 ResponseWriter 然后返回.
- panic(ErrAbortHandler) 让客户端知道回复被中断.

*** FileServer
#+BEGIN_SRC C
func FileServer(root FileSystem) Handler
#+END_SRC

*** NotFoundHandler
#+BEGIN_SRC C
func NotFoundHandler() Handler
#+END_SRC

*** RedirectHandler
#+BEGIN_SRC C
func RedirectHandler(url string, code int) Handler
#+END_SRC

*** TimeoutHandler
#+BEGIN_SRC C
func TimeoutHandler(h Handler, dt time.Duration, msg string) Handler
#+END_SRC

返回一个 Handler h, 它具有时间的限制

*** HandlerFunc
#+BEGIN_SRC C
type HandlerFunc func(ResponseWriter, *Request)
#+END_SRC

HandlerFunc 允许你自定义 HTTP handlers 的一个适配器。
只要函数 f 实现了合适的签名(方法), HandlerFunc(f) 就是一个 Handler。


#+BEGIN_SRC C
func (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request)
#+END_SRC

ServeHTTP 调用 f(w, r)


** [[https://golang.org/pkg/net/http/#Request][Request]]

** Response

** Transport

** Pusher

* PDF导出的参考资料
- http://orgmode.org/worg/org-tutorials/org-latex-export.html
- http://blog.csdn.net/ywj1225/article/details/7407316
- http://comments.gmane.org/gmane.emacs.orgmode/52201
